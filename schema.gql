# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FileEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  src: String
  filename: String
  provider: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  recoveryCode: String!
  image: FileEntity!
  events: EventEntity!
}

type EventEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  placeId: String
  title: String
  description: String
  startDate: DateTime!
  endDate: DateTime!
  ticketPrice: Float!
  author: UserEntity!
  image: FileEntity!
}

type UserWithToken {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  recoveryCode: String!
  image: FileEntity!
  events: EventEntity!
  token: String!
  provider: String!
}

type GeolocationEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  placeId: String!
  latitude: Float!
  longitude: Float!
  country: String
  locality: String
  route: String
  streetNumber: String
}

type Location {
  lat: Float!
  lng: Float!
}

type Geometry {
  location: Location!
}

type Place {
  name: String!
  url: String!
  geometry: Geometry!
  country: String!
  locality: String!
}

type Event {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  placeId: String
  title: String
  description: String
  startDate: DateTime!
  endDate: DateTime!
  ticketPrice: Float!
  author: UserEntity!
  image: FileEntity!
  place: Place!
  distance: Float!
}

type EventPage {
  items: [Event!]!
  totalPagesCount: Int!
}

type Query {
  getMe: UserEntity!
  getGeolocationByCoords(latitude: Float!, longitude: Float!): GeolocationEntity!
  getEvents(skip: Float!, limit: Float!): EventPage!
  getEventById(id: Float!, originId: String!): Event!
  autocompleteEvents(query: String!): [Event!]!
  searchEvents(query: String!): [Event!]!
}

type Mutation {
  signUp(input: SignUpInput!): UserWithToken!
  login(input: LoginInput!): UserWithToken!
  loginWithGoogle(idToken: String!): UserWithToken!
  loginWithFacebook(accessToken: String!): UserWithToken!
  sendResetPasswordEmail(input: ForgotPasswordInput!): Boolean!
  addEvent(input: EventInput!): EventEntity!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

input ForgotPasswordInput {
  email: String!
  language: String!
}

input EventInput {
  placeId: String!
  title: String!
  description: String!
  startDate: String!
  endDate: String!
  ticketPrice: Float!
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload