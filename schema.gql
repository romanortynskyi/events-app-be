# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FileEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  src: String
  filename: String
  provider: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  recoveryCode: String!
  image: FileEntity!
  events: EventEntity!
}

type Location {
  latitude: Float!
  longitude: Float!
}

type EventEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  placeId: String
  geolocation: Location
  title: String
  description: String
  startDate: DateTime!
  endDate: DateTime!
  ticketPrice: Float!
  author: UserEntity!
  image: FileEntity!
}

type UserWithToken {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  recoveryCode: String!
  image: FileEntity!
  events: EventEntity!
  token: String!
  provider: String!
}

type GeolocationEntity {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  placeId: String!
  latitude: Float!
  longitude: Float!
  country: String
  locality: String
  route: String
  streetNumber: String
}

type Place {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  originalId: String!
  googleMapsUri: String!
  location: Location!
}

type File {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  src: String
  filename: String
  provider: String!
}

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  recoveryCode: String
  image: File!
}

type Event {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  geolocation: Location
  placeId: String!
  title: String
  description: String
  startDate: DateTime!
  endDate: DateTime!
  ticketPrice: Float!
  author: User!
  image: File!
  place: Place!
  distance: Float
}

type EventPage {
  items: [Event!]!
  totalPagesCount: Int!
}

type MatchedSubstring {
  length: Float!
  offset: Float!
}

type StructuredFormatting {
  mainText: String!
  mainTextMatchedSubstrings: [MatchedSubstring!]!
  secondaryText: String
}

type Term {
  offset: Float!
  value: String!
}

type AutocompletePlacesPrediction {
  description: String!
  matchedSubstrings: [MatchedSubstring!]!
  placeId: String!
  structuredFormatting: StructuredFormatting!
  terms: [Term!]!
  types: [String!]!
}

type AutocompletePlacesPredictionPage {
  items: [AutocompletePlacesPrediction!]!
  totalPagesCount: Int!
}

type Query {
  getMe: UserEntity!
  getGeolocationByCoords(latitude: Float!, longitude: Float!): GeolocationEntity!
  getEvents(skip: Int, limit: Int, bounds: GetEventsBounds): EventPage!
  getEventById(id: Float!, originId: String!): Event!
  autocompleteEvents(input: AutocompleteEventsInput!): EventPage!
  searchEvents(input: SearchEventsInput!): EventPage!
  autocompletePlaces(input: AutocompletePlacesInput!): AutocompletePlacesPredictionPage!
}

input GetEventsBounds {
  xMin: Float!
  yMin: Float!
  xMax: Float!
  yMax: Float!
}

input AutocompleteEventsInput {
  query: String!
  skip: Float!
  limit: Float!
}

input SearchEventsInput {
  query: String!
  skip: Float!
  limit: Float!
}

input AutocompletePlacesInput {
  skip: Float!
  limit: Float!
  query: String!
}

type Mutation {
  signUp(input: SignUpInput!): UserWithToken!
  login(input: LoginInput!): UserWithToken!
  loginWithGoogle(idToken: String!): UserWithToken!
  loginWithFacebook(accessToken: String!): UserWithToken!
  sendResetPasswordEmail(input: ForgotPasswordInput!): Boolean!
  addEvent(input: EventInput!): Event!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

input ForgotPasswordInput {
  email: String!
  language: String!
}

input EventInput {
  placeId: String!
  title: String!
  description: String!
  startDate: String!
  endDate: String!
  ticketPrice: Float!
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload